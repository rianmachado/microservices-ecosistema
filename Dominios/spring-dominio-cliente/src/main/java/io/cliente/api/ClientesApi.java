/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.cliente.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.cliente.model.Cliente;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-11T00:36:48.442Z")

@Api(value = "clientes", description = "the clientes API")
public interface ClientesApi {

    @ApiOperation(value = "Criar novo cliente", nickname = "addCliente", notes = "", tags={ "clientes", })
    @ApiResponses(value = { 
    @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/clientes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addCliente(@ApiParam(value = "Cliente object necessário para gravar um cliente novo" ,required=true )  @Valid @RequestBody Cliente body);


    @ApiOperation(value = "Delete um cliente", nickname = "deleteCliente", notes = "", tags={ "clientes", })
    @ApiResponses(value = { 
    @ApiResponse(code = 400, message = "Invalid ID supplied"),
    @ApiResponse(code = 404, message = "Cliente not found") })
    @RequestMapping(value = "/clientes/{clienteId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCliente(@ApiParam(value = "Cliente id para deletar",required=true) @PathVariable("clienteId") Long clienteId);


    @ApiOperation(value = "Localizar cliente por ID", nickname = "getClienteById", notes = "Recupera um cliente", response = Cliente.class, tags={ "clientes", })
    @ApiResponses(value = { 
    @ApiResponse(code = 200, message = "successful operation", response = Cliente.class),
    @ApiResponse(code = 400, message = "Invalid ID supplied"),
    @ApiResponse(code = 404, message = "Cliente not found") })
    @RequestMapping(value = "/clientes/{clienteId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cliente> getClienteById(@ApiParam(value = "ID of pet to return",required=true) @PathVariable("clienteId") Long clienteId);


    @ApiOperation(value = "Atualizar cliente existente", nickname = "updateCliente", notes = "", tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Cliente não encontrado"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/clientes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCliente(@ApiParam(value = "Cliente object necessário para atualizar um cliente existente" ,required=true )  @Valid @RequestBody Cliente body);

}
